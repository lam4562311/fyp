// Generated by gencpp from file ps4-bot/Navigation.msg
// DO NOT EDIT!


#ifndef PS4-BOT_MESSAGE_NAVIGATION_H
#define PS4-BOT_MESSAGE_NAVIGATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geographic_msgs/GeoPoint.h>
#include <geographic_msgs/GeoPoint.h>

namespace ps4-bot
{
template <class ContainerAllocator>
struct Navigation_
{
  typedef Navigation_<ContainerAllocator> Type;

  Navigation_()
    : start()
    , goal()  {
    }
  Navigation_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::ps4-bot::Navigation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ps4-bot::Navigation_<ContainerAllocator> const> ConstPtr;

}; // struct Navigation_

typedef ::ps4-bot::Navigation_<std::allocator<void> > Navigation;

typedef boost::shared_ptr< ::ps4-bot::Navigation > NavigationPtr;
typedef boost::shared_ptr< ::ps4-bot::Navigation const> NavigationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ps4-bot::Navigation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ps4-bot::Navigation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ps4-bot::Navigation_<ContainerAllocator1> & lhs, const ::ps4-bot::Navigation_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ps4-bot::Navigation_<ContainerAllocator1> & lhs, const ::ps4-bot::Navigation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ps4-bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ps4-bot::Navigation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ps4-bot::Navigation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4-bot::Navigation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4-bot::Navigation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4-bot::Navigation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4-bot::Navigation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ps4-bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cad6de11e4ae4ca568785186e1f99f89";
  }

  static const char* value(const ::ps4-bot::Navigation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcad6de11e4ae4ca5ULL;
  static const uint64_t static_value2 = 0x68785186e1f99f89ULL;
};

template<class ContainerAllocator>
struct DataType< ::ps4-bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ps4-bot/Navigation";
  }

  static const char* value(const ::ps4-bot::Navigation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ps4-bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Recording the start and goal of the navigation\n"
"\n"
"#lat lng of start position\n"
"geographic_msgs/GeoPoint start\n"
"\n"
"#lat lng of goal position\n"
"geographic_msgs/GeoPoint goal\n"
"\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::ps4-bot::Navigation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ps4-bot::Navigation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Navigation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ps4-bot::Navigation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ps4-bot::Navigation_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PS4-BOT_MESSAGE_NAVIGATION_H
