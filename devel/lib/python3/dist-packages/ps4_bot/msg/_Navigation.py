# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ps4_bot/Navigation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg

class Navigation(genpy.Message):
  _md5sum = "7307218b869e7c7e3251c645c123d534"
  _type = "ps4_bot/Navigation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#self.center, self.half_of_size_x, self.half_of_size_y, self.matrix, self.path,
#Recording the start and goal of the navigation

#lat lng of center position
geographic_msgs/GeoPoint center

#map pixels
int64 half_of_size_x
int64 half_of_size_y

#map
int64 width
int64 height
uint8[] matrix

#path
int64[] path
================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
"""
  __slots__ = ['center','half_of_size_x','half_of_size_y','width','height','matrix','path']
  _slot_types = ['geographic_msgs/GeoPoint','int64','int64','int64','int64','uint8[]','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,half_of_size_x,half_of_size_y,width,height,matrix,path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Navigation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = geographic_msgs.msg.GeoPoint()
      if self.half_of_size_x is None:
        self.half_of_size_x = 0
      if self.half_of_size_y is None:
        self.half_of_size_y = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.matrix is None:
        self.matrix = b''
      if self.path is None:
        self.path = []
    else:
      self.center = geographic_msgs.msg.GeoPoint()
      self.half_of_size_x = 0
      self.half_of_size_y = 0
      self.width = 0
      self.height = 0
      self.matrix = b''
      self.path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d4q().pack(_x.center.latitude, _x.center.longitude, _x.center.altitude, _x.half_of_size_x, _x.half_of_size_y, _x.width, _x.height))
      _x = self.matrix
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.path))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.center.latitude, _x.center.longitude, _x.center.altitude, _x.half_of_size_x, _x.half_of_size_y, _x.width, _x.height,) = _get_struct_3d4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.matrix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.path = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d4q().pack(_x.center.latitude, _x.center.longitude, _x.center.altitude, _x.half_of_size_x, _x.half_of_size_y, _x.width, _x.height))
      _x = self.matrix
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.path.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.center.latitude, _x.center.longitude, _x.center.altitude, _x.half_of_size_x, _x.half_of_size_y, _x.width, _x.height,) = _get_struct_3d4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.matrix = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.path = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d4q = None
def _get_struct_3d4q():
    global _struct_3d4q
    if _struct_3d4q is None:
        _struct_3d4q = struct.Struct("<3d4q")
    return _struct_3d4q
