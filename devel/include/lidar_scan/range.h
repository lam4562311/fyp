// Generated by gencpp from file lidar_scan/range.msg
// DO NOT EDIT!


#ifndef LIDAR_SCAN_MESSAGE_RANGE_H
#define LIDAR_SCAN_MESSAGE_RANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_scan
{
template <class ContainerAllocator>
struct range_
{
  typedef range_<ContainerAllocator> Type;

  range_()
    : angle()
    , distance()  {
    }
  range_(const ContainerAllocator& _alloc)
    : angle(_alloc)
    , distance(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_type;
  _angle_type angle;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::lidar_scan::range_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_scan::range_<ContainerAllocator> const> ConstPtr;

}; // struct range_

typedef ::lidar_scan::range_<std::allocator<void> > range;

typedef boost::shared_ptr< ::lidar_scan::range > rangePtr;
typedef boost::shared_ptr< ::lidar_scan::range const> rangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_scan::range_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_scan::range_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_scan::range_<ContainerAllocator1> & lhs, const ::lidar_scan::range_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_scan::range_<ContainerAllocator1> & lhs, const ::lidar_scan::range_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_scan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_scan::range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_scan::range_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_scan::range_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_scan::range_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_scan::range_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_scan::range_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_scan::range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d53d4c2718eeda94877ddbdb7bb34c6";
  }

  static const char* value(const ::lidar_scan::range_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d53d4c2718eeda9ULL;
  static const uint64_t static_value2 = 0x4877ddbdb7bb34c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_scan::range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_scan/range";
  }

  static const char* value(const ::lidar_scan::range_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_scan::range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] angle\n"
"float32[] distance\n"
;
  }

  static const char* value(const ::lidar_scan::range_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_scan::range_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct range_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_scan::range_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_scan::range_<ContainerAllocator>& v)
  {
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_SCAN_MESSAGE_RANGE_H
