// Generated by gencpp from file ps4_bot/navigationResponse.msg
// DO NOT EDIT!


#ifndef PS4_BOT_MESSAGE_NAVIGATIONRESPONSE_H
#define PS4_BOT_MESSAGE_NAVIGATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ps4_bot/vertices.h>

namespace ps4_bot
{
template <class ContainerAllocator>
struct navigationResponse_
{
  typedef navigationResponse_<ContainerAllocator> Type;

  navigationResponse_()
    : polylines()  {
    }
  navigationResponse_(const ContainerAllocator& _alloc)
    : polylines(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ps4_bot::vertices_<ContainerAllocator>  _polylines_type;
  _polylines_type polylines;





  typedef boost::shared_ptr< ::ps4_bot::navigationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ps4_bot::navigationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct navigationResponse_

typedef ::ps4_bot::navigationResponse_<std::allocator<void> > navigationResponse;

typedef boost::shared_ptr< ::ps4_bot::navigationResponse > navigationResponsePtr;
typedef boost::shared_ptr< ::ps4_bot::navigationResponse const> navigationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ps4_bot::navigationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ps4_bot::navigationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ps4_bot::navigationResponse_<ContainerAllocator1> & lhs, const ::ps4_bot::navigationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.polylines == rhs.polylines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ps4_bot::navigationResponse_<ContainerAllocator1> & lhs, const ::ps4_bot::navigationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ps4_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ps4_bot::navigationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ps4_bot::navigationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4_bot::navigationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4_bot::navigationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4_bot::navigationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4_bot::navigationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ps4_bot::navigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e395a9670e57edfa54d085ef61bac472";
  }

  static const char* value(const ::ps4_bot::navigationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe395a9670e57edfaULL;
  static const uint64_t static_value2 = 0x54d085ef61bac472ULL;
};

template<class ContainerAllocator>
struct DataType< ::ps4_bot::navigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ps4_bot/navigationResponse";
  }

  static const char* value(const ::ps4_bot::navigationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ps4_bot::navigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"ps4_bot/vertices polylines\n"
"\n"
"================================================================================\n"
"MSG: ps4_bot/vertices\n"
"#list of GeoPoint\n"
"geographic_msgs/GeoPoint[] vertices\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::ps4_bot::navigationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ps4_bot::navigationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polylines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ps4_bot::navigationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ps4_bot::navigationResponse_<ContainerAllocator>& v)
  {
    s << indent << "polylines: ";
    s << std::endl;
    Printer< ::ps4_bot::vertices_<ContainerAllocator> >::stream(s, indent + "  ", v.polylines);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PS4_BOT_MESSAGE_NAVIGATIONRESPONSE_H
