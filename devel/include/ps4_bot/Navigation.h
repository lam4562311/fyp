// Generated by gencpp from file ps4_bot/Navigation.msg
// DO NOT EDIT!


#ifndef PS4_BOT_MESSAGE_NAVIGATION_H
#define PS4_BOT_MESSAGE_NAVIGATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geographic_msgs/GeoPoint.h>

namespace ps4_bot
{
template <class ContainerAllocator>
struct Navigation_
{
  typedef Navigation_<ContainerAllocator> Type;

  Navigation_()
    : center()
    , half_of_size_x(0)
    , half_of_size_y(0)
    , width(0)
    , height(0)
    , matrix()
    , path()  {
    }
  Navigation_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , half_of_size_x(0)
    , half_of_size_y(0)
    , width(0)
    , height(0)
    , matrix(_alloc)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef int64_t _half_of_size_x_type;
  _half_of_size_x_type half_of_size_x;

   typedef int64_t _half_of_size_y_type;
  _half_of_size_y_type half_of_size_y;

   typedef int64_t _width_type;
  _width_type width;

   typedef int64_t _height_type;
  _height_type height;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _matrix_type;
  _matrix_type matrix;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::ps4_bot::Navigation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ps4_bot::Navigation_<ContainerAllocator> const> ConstPtr;

}; // struct Navigation_

typedef ::ps4_bot::Navigation_<std::allocator<void> > Navigation;

typedef boost::shared_ptr< ::ps4_bot::Navigation > NavigationPtr;
typedef boost::shared_ptr< ::ps4_bot::Navigation const> NavigationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ps4_bot::Navigation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ps4_bot::Navigation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ps4_bot::Navigation_<ContainerAllocator1> & lhs, const ::ps4_bot::Navigation_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.half_of_size_x == rhs.half_of_size_x &&
    lhs.half_of_size_y == rhs.half_of_size_y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.matrix == rhs.matrix &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ps4_bot::Navigation_<ContainerAllocator1> & lhs, const ::ps4_bot::Navigation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ps4_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ps4_bot::Navigation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ps4_bot::Navigation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4_bot::Navigation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ps4_bot::Navigation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4_bot::Navigation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ps4_bot::Navigation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ps4_bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7307218b869e7c7e3251c645c123d534";
  }

  static const char* value(const ::ps4_bot::Navigation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7307218b869e7c7eULL;
  static const uint64_t static_value2 = 0x3251c645c123d534ULL;
};

template<class ContainerAllocator>
struct DataType< ::ps4_bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ps4_bot/Navigation";
  }

  static const char* value(const ::ps4_bot::Navigation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ps4_bot::Navigation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#self.center, self.half_of_size_x, self.half_of_size_y, self.matrix, self.path,\n"
"#Recording the start and goal of the navigation\n"
"\n"
"#lat lng of center position\n"
"geographic_msgs/GeoPoint center\n"
"\n"
"#map pixels\n"
"int64 half_of_size_x\n"
"int64 half_of_size_y\n"
"\n"
"#map\n"
"int64 width\n"
"int64 height\n"
"uint8[] matrix\n"
"\n"
"#path\n"
"int64[] path\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::ps4_bot::Navigation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ps4_bot::Navigation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.half_of_size_x);
      stream.next(m.half_of_size_y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.matrix);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Navigation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ps4_bot::Navigation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ps4_bot::Navigation_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "half_of_size_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.half_of_size_x);
    s << indent << "half_of_size_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.half_of_size_y);
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
    s << indent << "matrix[]" << std::endl;
    for (size_t i = 0; i < v.matrix.size(); ++i)
    {
      s << indent << "  matrix[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.matrix[i]);
    }
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PS4_BOT_MESSAGE_NAVIGATION_H
